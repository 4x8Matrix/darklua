use crate::nodes::{
    Arguments,
    AssignStatement,
    BinaryExpression,
    BinaryOperator,
    Block,
    Expression,
    FieldExpression,
    FunctionCall,
    LastStatement,
    IfStatement,
    Prefix,
    GenericForStatement,
    IndexExpression,
    LocalAssignStatement,
    LocalFunctionStatement,
    NumericForStatement,
    Statement,
    StringExpression,
    TableExpression,
    UnaryExpression,
    UnaryOperator,
};

pub fn create_merge_function<I: Into<String>>(identifier: I) -> Statement {
    let result = "result";
    let index = "index";
    let key = "key";
    let value = "value";
    LocalFunctionStatement::from_name(
        identifier,
        Block::new(
            vec![
                LocalAssignStatement::from_variable(result)
                    .with_value(TableExpression::default())
                    .into(),
                NumericForStatement::new(
                    index.to_owned(),
                    Expression::from(1_f64),
                    FunctionCall::from_name("select")
                        .with_arguments(Arguments::Tuple(vec![
                            StringExpression::from_value("#").into(),
                            Expression::VariableArguments,
                        ]))
                        .into(),
                    None,
                    Block::new(
                        vec![
                            GenericForStatement::new(
                                vec![key.to_owned(), value.to_owned()],
                                vec![
                                    FunctionCall::from_name("pairs")
                                        .with_arguments(Arguments::Tuple(vec![
                                            FunctionCall::from_name("select")
                                                .with_arguments(Arguments::Tuple(vec![
                                                    Expression::Identifier(index.to_owned()),
                                                    Expression::VariableArguments,
                                                ]))
                                                .into(),
                                        ]))
                                        .into(),
                                ],
                                Block::new(
                                    vec![
                                        AssignStatement::new(
                                            vec![
                                                IndexExpression::new(
                                                    Prefix::from_name(result),
                                                    Expression::Identifier(key.to_owned())
                                                ).into()
                                            ],
                                            vec![
                                                Expression::Identifier(value.to_owned())
                                            ]
                                        ).into(),
                                    ],
                                    None,
                                )
                            ).into(),
                        ],
                        None,
                    ),
                ).into(),
            ],
            Some(LastStatement::Return(
                vec![Expression::Identifier(result.to_owned())]
            ))
        )
    )
    .variadic()
    .into()
}

pub fn create_mixed_merge_function<I: Into<String>>(identifier: I) -> Statement {
    let result = "result";
    let index = "index";
    let key = "key";
    let value = "value";
    let children = "children";
    let length = "length";
    LocalFunctionStatement::from_name(
        identifier,
        Block::new(
            vec![
                LocalAssignStatement::from_variable(result)
                    .with_value(TableExpression::default())
                    .into(),
                NumericForStatement::new(
                    index.to_owned(),
                    Expression::from(1_f64),
                    FunctionCall::from_name("select")
                        .with_arguments(Arguments::Tuple(vec![
                            StringExpression::from_value("#").into(),
                            Expression::VariableArguments,
                        ]))
                        .into(),
                    None,
                    Block::new(
                        vec![
                            LocalAssignStatement::from_variable(children)
                                .with_value(
                                    FunctionCall::from_name("select")
                                        .with_arguments(Arguments::Tuple(vec![
                                            Expression::Identifier(index.to_owned()),
                                            Expression::VariableArguments,
                                        ]))
                                )
                                .into(),
                            LocalAssignStatement::from_variable(length)
                                .with_value(
                                    UnaryExpression::new(
                                        UnaryOperator::Length,
                                        Expression::Identifier(children.to_owned()),
                                    )
                                )
                                .into(),
                            GenericForStatement::new(
                                vec![key.to_owned(), value.to_owned()],
                                vec![
                                    FunctionCall::from_name("pairs")
                                        .with_arguments(Arguments::Tuple(vec![
                                            Expression::Identifier(children.to_owned()),
                                        ]))
                                        .into(),
                                ],
                                Block::new(
                                    vec![
                                        IfStatement::create(
                                            BinaryExpression::new(
                                                BinaryOperator::And,
                                                BinaryExpression::new(
                                                    BinaryOperator::And,
                                                    BinaryExpression::new(
                                                        BinaryOperator::And,
                                                        BinaryExpression::new(
                                                            BinaryOperator::Equal,
                                                            FunctionCall::from_name("typeof")
                                                                .with_arguments(Arguments::Tuple(vec![
                                                                    Expression::Identifier(key.to_owned()),
                                                                ])),
                                                            StringExpression::from_value("number"),
                                                        ),
                                                        BinaryExpression::new(
                                                            BinaryOperator::GreaterThan,
                                                            Expression::Identifier(key.to_owned()),
                                                            Expression::from(0_f64),
                                                        ),
                                                    ),
                                                    BinaryExpression::new(
                                                        BinaryOperator::LowerOrEqualThan,
                                                        Expression::Identifier(key.to_owned()),
                                                        Expression::Identifier(length.to_owned()),
                                                    ),
                                                ),
                                                BinaryExpression::new(
                                                    BinaryOperator::Equal,
                                                    BinaryExpression::new(
                                                        BinaryOperator::Percent,
                                                        Expression::Identifier(key.to_owned()),
                                                        Expression::from(1_f64),
                                                    ),
                                                    Expression::from(0_f64),
                                                ),
                                            ).into(),
                                            Block::new(
                                                vec![
                                                    FunctionCall::new(
                                                        FieldExpression::new(
                                                            Prefix::from_name("table"),
                                                            "insert",
                                                        ).into(),
                                                        Arguments::Tuple(vec![
                                                            Expression::Identifier(result.to_owned()),
                                                            Expression::Identifier(value.to_owned()),
                                                        ]),
                                                        None,
                                                    ).into(),
                                                ],
                                                None,
                                            )
                                        ).with_else_block(
                                            Block::new(
                                                vec![
                                                    AssignStatement::new(
                                                        vec![
                                                            IndexExpression::new(
                                                                Prefix::from_name(result),
                                                                Expression::Identifier(key.to_owned())
                                                            ).into()
                                                        ],
                                                        vec![
                                                            Expression::Identifier(value.to_owned())
                                                        ]
                                                    ).into(),
                                                ],
                                                None,
                                            )
                                        ).into(),
                                    ],
                                    None,
                                )
                            ).into(),
                        ],
                        None,
                    ),
                ).into(),
            ],
            Some(LastStatement::Return(
                vec![Expression::Identifier(result.to_owned())]
            ))
        )
    )
    .variadic()
    .into()
}
